import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import repository
from keyboard.main_menu import menu_keyboard, main_reply_keyboard
from datetime import datetime
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_repo = repository.UserRepository()


class SupportStates(StatesGroup):
    waiting_for_message = State()
    admin_reply = State()


class EditProfile(StatesGroup):
    choosing_field = State()
    input_new_value = State()


class CancelRecording(StatesGroup):
    confirming = State()


class Registration(StatesGroup):
    input_name = State()
    input_surname = State()
    input_phone = State()
    input_email = State()
    input_category = State()


class RecordingStates(StatesGroup):
    choosing_time = State()


class AdminStates(StatesGroup):
    waiting_for_broadcast = State()


router = Router()


@router.message(F.text.lower() == "–º–µ–Ω—é")
async def show_menu(message: types.Message):
    await message.answer(
        "üéñÔ∏è –¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —à–∞—Ö–º–∞—Ç",
        reply_markup=menu_keyboard
    )


@router.callback_query(F.data == "support")
async def support_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. "
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SupportStates.waiting_for_message)
    await callback.answer()


@router.message(SupportStates.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext, bot: Bot):
    support_message = message.text

    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ—Ç username'}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìÖ –î–∞—Ç–∞: {message.date.strftime('%d-%m-%Y %H:%M')}\n\n"
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n{support_message}"
    )

    ADMIN_ID = 6166075182

    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n{user_info}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    callback_data=f"reply_to_{message.from_user.id}"
                )]
            ]))

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.\n\n"
            "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.",
            reply_markup=main_reply_keyboard
        )
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_keyboard
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()


@router.callback_query(F.data.startswith("reply_to_"))
async def reply_to_user(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):")
    await state.set_state(SupportStates.admin_reply)
    await state.update_data(user_id=user_id)


@router.message(SupportStates.admin_reply)
async def send_admin_reply(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data.get("user_id")

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await state.clear()


@router.callback_query(F.data == "write")
async def write_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = user_repo.get_user_by_id(user_id)

    if not user:
        await callback.message.answer(
            "‚ùå –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
            reply_markup=main_reply_keyboard
        )
        return
    if 'username' not in user or 'username_phone' not in user:
        await callback.message.answer(
            "‚ùå –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!",
            reply_markup=main_reply_keyboard
        )
        return
    builder = InlineKeyboardBuilder()
    times = [
        "–ü–Ω 17:00-19:00",
        "–í—Ç 16:00-18:00",
        "–°—Ä 18:00-20:00",
        "–ß—Ç 16:00-18:00",
        "–ü—Ç 17:00-19:00",
        "–°–± 10:00-12:00"
    ]

    for time in times:
        builder.button(text=time, callback_data=f"time_{time}")

    builder.adjust(2)

    await callback.message.answer(
        "üïí –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RecordingStates.choosing_time)


@router.callback_query(F.data.startswith("time_"), RecordingStates.choosing_time)
async def process_time_selection(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    selected_time = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user = user_repo.get_user_by_id(user_id)

    recording_data = {
        "user_id": user_id,
        "username": user["username"],
        "phone": user["username_phone"],
        "time": selected_time,
        "date": callback.message.date.strftime("%d-%m-%Y %H:%M")
    }

    if user_repo.add_recording(recording_data):
        builder = InlineKeyboardBuilder()
        builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_recording")
        builder.adjust(1)

        await callback.message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
            f"üìÖ –í—Ä–µ–º—è: {selected_time}\n"
            f"üë§ –ò–º—è: {user['username']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['username_phone']}\n\n"
            "–¢—Ä–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=builder.as_markup()
        )

        await bot.send_message(
            6166075182,
            f"üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['username_phone']}\n"
            f"üïí –í—Ä–µ–º—è: {selected_time}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {recording_data['date']}"
        )
    else:
        await callback.message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!",
            reply_markup=main_reply_keyboard
        )

    await state.clear()


@router.callback_query(F.data == "schedule")
async def show_schedule(callback: types.CallbackQuery):
    await callback.message.answer("""üéñÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ø–æ —à–∞—Ö–º–∞—Ç–∞–º üéñÔ∏è

‚úÖ –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä–æ–º–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è:

| –î–µ–Ω—å |    –í—Ä–µ–º—è    |
| ---- | ----------- |
|  –ü–Ω  | 17:00‚Äì19:00 |
|  –í—Ç  | 16:00‚Äì18:00 |
|  –°—Ä  | 18:00‚Äì20:00 |
|  –ß—Ç  | 16:00‚Äì18:00 |
|  –ü—Ç  | 17:00‚Äì19:00 |
|  –°–±  | 10:00‚Äì12:00 |
üÜö –ì—Ä—É–ø–ø—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:

- –ù–æ–≤–∏—á–∫–∏: –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 16:00
- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–≥—Ä–æ–∫–∏: —Å—Ä–µ–¥–∞ –∏ –ø—è—Ç–Ω–∏—Ü–∞ –≤ 18:00
- –î–µ—Ç–∏: —Å—É–±–±–æ—Ç–∞ –≤ 10:00

üõ† –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.

üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –≥. –û—Ä–µ–Ω–±—É—Ä–≥ —É–ª.–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è –¥. 314, —ç—Ç. ‚Ññ1

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–∏—Ä—É —à–∞—Ö–º–∞—Ç –∏ –ø–æ–∫–æ—Ä—è–π –≤–µ—Ä—à–∏–Ω—ã –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!""")


@router.callback_query(F.data == "trener")
async def show_trainer_info(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer_photo(
            photo=FSInputFile("images/photo.png"),
            caption=(
                "üåü –®–∞—Ö–º–∞—Ç—ã ‚Äî —Ç–≤–æ—è –¥–æ—Ä–æ–≥–∞ –∫ —É—Å–ø–µ—Ö—É! üåü\n\n"
                "–°–æ –º–Ω–æ–π ‚Äî —Ç—Ä–µ–Ω–µ—Ä–æ–º –ú–∞—Ä–∏–µ–πüî• ‚Äî —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å —Å–µ–∫—Ä–µ—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—à–ª–æ–≥–æ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ. "
                "–¢—ã –Ω–∞—É—á–∏—à—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏.\n\n"
                "‚úÖ –ò–≥—Ä–∞–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ!\n"
                "‚úÖ –ü–æ–≤—ã—à–∞–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö!\n"
                "‚úÖ –°–æ–∑–¥–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —à–∫–æ–ª—É —É—Å–ø–µ—Ö–∞ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ!\n\n"
                "–ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏, —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
            )
        )
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer()


@router.callback_query(F.data == "registrastion")
async def start_registration(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    existing_user = user_repo.get_user_by_id(user_id)

    if existing_user:
        builder = InlineKeyboardBuilder()
        builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
        builder.adjust(1)

        await callback.message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –ò–º—è: {existing_user['username']}\n"
            f"üìù –§–∞–º–∏–ª–∏—è: {existing_user['username_surname']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {existing_user['username_phone']}\n"
            f"üìß Email: {existing_user['username_email']}\n"
            f"üèÜ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: {existing_user['username_category']}",
            reply_markup=builder.as_markup()
        )
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    await state.set_state(Registration.input_name)


@router.message(Registration.input_name)
async def input_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(username=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")
    await state.set_state(Registration.input_surname)


@router.message(Registration.input_surname)
async def input_surname(message: Message, state: FSMContext):
    surname = message.text
    await state.update_data(username_surname=surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω")
    await state.set_state(Registration.input_phone)


@router.message(Registration.input_phone)
async def input_phone(message: Message, state: FSMContext):
    phone = message.text
    await state.update_data(username_phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É")
    await state.set_state(Registration.input_email)


@router.message(Registration.input_email)
async def input_email(message: Message, state: FSMContext):
    email = message.text
    await state.update_data(username_email=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã")
    await state.set_state(Registration.input_category)


@router.message(Registration.input_category)
async def input_category(message: Message, state: FSMContext, bot: Bot):
    category = message.text
    await state.update_data(username_category=category)

    data = await state.get_data()
    user_data = {
        "user_id": message.from_user.id,
        "username": data.get("username", ""),
        "username_surname": data.get("username_surname", ""),
        "username_phone": data.get("username_phone", ""),
        "username_email": data.get("username_email", ""),
        "username_category": data.get("username_category", "")
    }

    if user_repo.add_user(user_data):
        ADMIN_ID = 6166075182
        registration_info = (
            "üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*\n\n"
            f"üë§ *–ò–º—è:* {user_data['username']}\n"
            f"üìù *–§–∞–º–∏–ª–∏—è:* {user_data['username_surname']}\n"
            f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data['username_phone']}\n"
            f"üìß *Email:* {user_data['username_email']}\n"
            f"üèÜ *–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã:* {user_data['username_category']}\n"
            f"üÜî *ID:* {message.from_user.id}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {datetime.now().strftime('%d-%m-%Y %H:%M')}"
        )

        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=registration_info,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                url=f"tg://user?id={message.from_user.id}"
                            ),
                            InlineKeyboardButton(
                                text="üìã –ü—Ä–æ—Ñ–∏–ª—å",
                                callback_data=f"admin_view_profile_{message.from_user.id}"
                            )
                        ]
                    ]
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë§ –ò–º—è: {user_data['username']}\n"
            f"üìù –§–∞–º–∏–ª–∏—è: {user_data['username_surname']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['username_phone']}\n"
            f"üìß Email: {user_data['username_email']}\n"
            f"üèÜ –†–∞–Ω–≥: {user_data['username_category']}",
            reply_markup=main_reply_keyboard
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!",
            reply_markup=main_reply_keyboard
        )

    await state.clear()


@router.callback_query(F.data == "edit_profile")
async def start_edit_profile(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = user_repo.get_user_by_id(user_id)

    if not user:
        await callback.message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=main_reply_keyboard
        )
        return

    builder = InlineKeyboardBuilder()
    fields = [
        ("–ò–º—è", "name"),
        ("–§–∞–º–∏–ª–∏—è", "surname"),
        ("–¢–µ–ª–µ—Ñ–æ–Ω", "phone"),
        ("Email", "email"),
        ("–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã", "category")
    ]

    for text, field in fields:
        builder.button(text=text, callback_data=f"edit_{field}")

    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
    builder.adjust(2)

    await callback.message.answer(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(EditProfile.choosing_field)


@router.callback_query(F.data.startswith("edit_"), EditProfile.choosing_field)
async def select_field_to_edit(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(field=field)

    field_names = {
        "name": "–∏–º—è",
        "surname": "—Ñ–∞–º–∏–ª–∏—é",
        "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω",
        "email": "email",
        "category": "—É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã"
    }

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_names[field]}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await state.set_state(EditProfile.input_new_value)


@router.message(EditProfile.input_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field = data["field"]
    new_value = message.text
    user_id = message.from_user.id

    users = user_repo.get_all_users()
    user_found = False

    field_mapping = {
        "name": "username",
        "surname": "username_surname",
        "phone": "username_phone",
        "email": "username_email",
        "category": "username_category"
    }

    db_field = field_mapping[field]

    updated_users = []
    for user in users:
        if "user_id" in user and user["user_id"] == user_id:
            user[db_field] = new_value
            user_found = True
        updated_users.append(user)

    if user_found:
        user_repo._save_data(user_repo.users_file, updated_users)

        updated_user = next((u for u in updated_users if "user_id" in u and u["user_id"] == user_id), None)

        if updated_user:
            await message.answer(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üë§ –ò–º—è: {updated_user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìù –§–∞–º–∏–ª–∏—è: {updated_user.get('username_surname', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {updated_user.get('username_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìß Email: {updated_user.get('username_email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üèÜ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: {updated_user.get('username_category', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
                reply_markup=main_reply_keyboard
            )
        else:
            await message.answer(
                "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
                reply_markup=main_reply_keyboard
            )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=main_reply_keyboard
        )

    await state.clear()


@router.callback_query(F.data == "cancel_edit", EditProfile.choosing_field)
@router.callback_query(F.data == "cancel_edit", EditProfile.input_new_value)
async def cancel_edit_profile(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_reply_keyboard
    )
    await state.clear()


@router.callback_query(F.data == "cancel_recording")
async def show_user_recordings(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    recordings = user_repo.get_all_recordings()
    user_recordings = [r for r in recordings if r["user_id"] == user_id]

    if not user_recordings:
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.",
            reply_markup=main_reply_keyboard
        )
        return

    builder = InlineKeyboardBuilder()
    for recording in user_recordings:
        builder.button(
            text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {recording['time']}",
            callback_data=f"confirm_cancel_{recording['time']}"
        )

    builder.button(text="–ù–∞–∑–∞–¥", callback_data="menu")
    builder.adjust(1)

    await callback.message.answer(
        "üìù –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n" +
        "\n".join([f"üïí {r['time']}" for r in user_recordings]),
        reply_markup=builder.as_markup()
    )
    await state.set_state(CancelRecording.confirming)


@router.callback_query(F.data.startswith("confirm_cancel_"), CancelRecording.confirming)
async def confirm_cancel_recording(callback: types.CallbackQuery, state: FSMContext):
    time_to_cancel = callback.data.split("_")[2]
    user_id = callback.from_user.id

    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"final_cancel_{time_to_cancel}")
    builder.button(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="menu")
    builder.adjust(2)

    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {time_to_cancel}?",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("final_cancel_"))
async def process_cancel_recording(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    time_to_cancel = callback.data.split("_")[2]
    user_id = callback.from_user.id

    recordings = user_repo.get_all_recordings()
    updated_recordings = [r for r in recordings if not (r["user_id"] == user_id and r["time"] == time_to_cancel)]

    if len(updated_recordings) < len(recordings):
        user_repo._save_data(user_repo.recordings_file, updated_recordings)

        user = user_repo.get_user_by_id(user_id)
        if user:
            await bot.send_message(
                5042095324,
                f"‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['username_phone']}\n"
                f"üïí –í—Ä–µ–º—è: {time_to_cancel}\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã: {callback.message.date.strftime('%d-%m-%Y %H:%M')}"
            )

        await callback.message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {time_to_cancel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=main_reply_keyboard
        )
    else:
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=main_reply_keyboard
        )

    await state.clear()


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != 6166075182:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    await callback.message.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ]
        )
    )
    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.answer()


@router.message(Command("broadcast"))
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != 6166075182:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_broadcast")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    builder.adjust(2)

    await message.answer(
        "‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.answer()


@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


@router.message(AdminStates.waiting_for_broadcast)
async def process_admin_broadcast(message: types.Message, state: FSMContext, bot: Bot):
    users = user_repo.get_all_users()
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return

    success = 0
    failed = 0

    progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    for user in users:
        try:
            await bot.send_message(
                chat_id=user['user_id'],
                text=message.html_text if message.html_text else message.text,
                parse_mode="HTML" if message.html_text else None
            )
            success += 1
            if success % 10 == 0:
                await progress_msg.edit_text(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}")
            await asyncio.sleep(0.1)
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('user_id')}: {e}")
    user_repo.add_broadcast({
        "text": message.text,
        "date": datetime.now().strftime("%d-%m-%Y %H:%M"),
        "success": success,
        "failed": failed
    })

    await progress_msg.delete()
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
        f"‚ñ™Ô∏è –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ñ™Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
        f"‚ñ™Ô∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_back")]
            ]
        )
    )
    await state.clear()


@router.callback_query(F.data == "my_profile")
async def show_my_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = user_repo.get_user_by_id(user_id)

    if not user:
        await callback.message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=main_reply_keyboard
        )
        return

    profile_text = (
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üè∑Ô∏è –ò–º—è: {user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù –§–∞–º–∏–ª–∏—è: {user.get('username_surname', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('username_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìß Email: {user.get('username_email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: {user.get('username_category', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")
    builder.adjust(1)

    await callback.message.answer(
        profile_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "my_recordings")
async def show_my_recordings(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    recordings = user_repo.get_user_recordings(user_id)

    if not recordings:
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.",
            reply_markup=main_reply_keyboard
        )
        return

    recordings_text = "üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è:\n\n"
    for i, rec in enumerate(recordings, 1):
        recordings_text += (
            f"{i}. üïí {rec.get('time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"   üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {rec.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_recording")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")
    builder.adjust(1)

    await callback.message.answer(
        recordings_text,
        reply_markup=builder.as_markup()
    )


@router.message(Registration.input_category)
async def input_category(message: Message, state: FSMContext, bot: Bot):
    category = message.text
    await state.update_data(username_category=category)

    data = await state.get_data()
    user_data = {
        "user_id": message.from_user.id,
        "username": data.get("username", ""),
        "username_surname": data.get("username_surname", ""),
        "username_phone": data.get("username_phone", ""),
        "username_email": data.get("username_email", ""),
        "username_category": data.get("username_category", "")
    }

    if user_repo.add_user(user_data):
        ADMIN_ID = 6166075182
        registration_info = (
            "üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*\n\n"
            f"üë§ *–ò–º—è:* {user_data['username']}\n"
            f"üìù *–§–∞–º–∏–ª–∏—è:* {user_data['username_surname']}\n"
            f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data['username_phone']}\n"
            f"üìß *Email:* {user_data['username_email']}\n"
            f"üèÜ *–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã:* {user_data['username_category']}\n"
            f"üÜî *ID:* {message.from_user.id}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {datetime.now().strftime('%d-%m-%Y %H:%M')}"
        )

        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=registration_info,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë§ –ò–º—è: {user_data['username']}\n"
            f"üìù –§–∞–º–∏–ª–∏—è: {user_data['username_surname']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['username_phone']}\n"
            f"üìß Email: {user_data['username_email']}\n"
            f"üèÜ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: {user_data['username_category']}",
            reply_markup=main_reply_keyboard
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!",
            reply_markup=main_reply_keyboard
        )

    await state.clear()


@router.callback_query(F.data.startswith("admin_view_profile_"))
async def admin_view_profile(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    user = user_repo.get_user_by_id(user_id)

    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    profile_text = (
        "üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"üÜî ID: {user_id}\n"
        f"üè∑Ô∏è –ò–º—è: {user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù –§–∞–º–∏–ª–∏—è: {user.get('username_surname', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('username_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìß Email: {user.get('username_email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: {user.get('username_category', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )

    await callback.message.edit_text(
        text=profile_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å",
                        url=f"tg://user?id={user_id}"
                    ),
                    InlineKeyboardButton(
                        text="üìÖ –ó–∞–ø–∏—Å–∏",
                        callback_data=f"admin_view_recordings_{user_id}"
                    )
                ]
            ]
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_view_recordings_"))
async def admin_view_recordings(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    recordings = user_repo.get_user_recordings(user_id)

    if not recordings:
        await callback.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    recordings_text = "üìÖ *–ó–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
    for i, rec in enumerate(recordings, 1):
        recordings_text += (
            f"{i}. üïí {rec.get('time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"   üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {rec.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        )

    await callback.message.edit_text(
        text=recordings_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=f"admin_view_profile_{user_id}"
                    )
                ]
            ]
        )
    )
    await callback.answer()


@router.message(Command("admin"))
async def admin_menu(message: types.Message):
    if message.from_user.id != 6166075182:
        return

    admin_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all_recordings")],
            [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")],
            [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")]
        ]
    )

    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb)


@router.callback_query(F.data == "admin_all_recordings")
async def show_all_recordings(callback: types.CallbackQuery):
    if callback.from_user.id != 6166075182:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    recordings = user_repo.get_all_recordings()

    if not recordings:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    recordings_by_time = {}
    for rec in recordings:
        time_slot = rec.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        if time_slot not in recordings_by_time:
            recordings_by_time[time_slot] = []
        recordings_by_time[time_slot].append(rec)
    message_text = "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è:\n\n"
    for time_slot, records in recordings_by_time.items():
        message_text += f"üïí {time_slot}:\n"
        for i, rec in enumerate(records, 1):
            user = user_repo.get_user_by_id(rec['user_id'])
            username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            message_text += f"{i}. {username} (ID: {rec['user_id']})\n"
        message_text += "\n"

    await callback.message.answer(
        message_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_all_recordings")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
        )
    )
    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    if callback.from_user.id != 6166075182:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    admin_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all_recordings")],
            [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")],
            [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")]
        ]
    )

    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=admin_kb
    )
    await callback.answer()


@router.callback_query(F.data == "admin_all_users")
async def show_all_users(callback: types.CallbackQuery, bot: Bot):
    if callback.from_user.id != 6166075182:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    users = user_repo.get_all_users()

    if not users:
        await callback.message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    message_text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for i, user in enumerate(users, 1):
        try:
            tg_user = await bot.get_chat(user['user_id'])
            username = f"@{tg_user.username}" if tg_user.username else "–Ω–µ—Ç username"
        except Exception as e:
            username = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –¥–ª—è {user['user_id']}: {e}")

        reg_date = user.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message_text += (
            f"{i}. {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
            f"{user.get('username_surname', '')}\n"
            f"   üë§ {username} "
            f"üì± {user.get('username_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')} "
            f"üÜî {user.get('user_id', 'N/A')}\n"
            f"   üìÖ {reg_date}\n\n"
        )

    await callback.message.answer(
        message_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_all_users")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
        )
    )
    await callback.answer()
